#!/usr/bin/perl -ws
use strict; use warnings; use 5.014;
use Time::HiRes qw/ time /;

sub cat {
    my $f = shift;
    open my $F, "<", $f or die "Can't open $f for reading: $!";
    chomp(my @lines = <$F>);
    return @lines;
}

sub compile {
    my @code = 'my $steps = 0; my $start = time;';
    push @code, sprintf('my $%s = 0;', $_) for 'a'..'d';
    my $line = 0;
    my $addline = sub {
        push @code, "LINE$line: \$steps++; @_;";
    };

    for (@_) {
        $line++;
        if    (/cpy (-?\d+) ([a-z])/)  { $addline->(sprintf('$%s = %d', $2, $1)) }
        elsif (/jnz ([a-z]) (-?\d+)/)  { $addline->(sprintf('goto LINE%s if $%s != 0', $line + $2, $1)) }
        elsif (/dec ([a-z])/)          { $addline->(sprintf('$%s--', $1)) }
        elsif (/inc ([a-z])/)          { $addline->(sprintf('$%s++', $1)) }
        elsif (/cpy ([a-z]) ([a-z])/)  { $addline->(sprintf('$%s = $%s', $2, $1)) }
        elsif (/jnz (-?\d+) (-?\d+)/)  { $addline->(sprintf('goto LINE%s if %d != 0', $line + $2, $1)) }
        else { die "Not implemented"; }
    }

    push @code, 'say "[$a $b $c $d]";';
    push @code, 'my $t = time; say sprintf("%d steps in %d seconds (%d ips)", $steps, $t - $start, $steps / ($t - $start));';
    return join "\n", @code;
}

#   954509 steps in 0 seconds (12105994 ips)
# 27683521 steps in 2 seconds (11664883 ips)
sub MAIN {
    my $file = shift // "12.in";
    my @lines = cat($file);
    {
        no strict;
        unshift @lines, $prepend if $prepend;
    }
    die $@ unless eval compile(@lines);
}

MAIN(@ARGV);
