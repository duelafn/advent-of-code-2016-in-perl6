#!/usr/bin/python3
# -*- coding: utf-8 -*-

import argparse
import collections

class VM(object):
    def __init__(self, ip):
        self.ip = ip
        self.reg = [0, 0, 0, 0, 0, 0]
        self.reg[self.ip] -= 1
        self.part = 0
        self.seen = set()
        self.e_set = set()
        self.e = collections.deque(maxlen=5)

    def run(self, prog):
        while -1 <= self.reg[self.ip] < len(prog)-1:
            self.reg[self.ip] += 1
            if self.reg[self.ip] == 28:
                if self.part == 1:
                    print(self.reg)
                    return
#                 reg = tuple(self.reg)
#                 if reg in self.seen:
#                     return
                if self.reg[4] in self.e_set:
                    print("DUP:", self.reg[4])
                    print(self.e)
                    return
                self.e_set.add(reg[4])
                self.e.append(reg[4])
                if 0 == (len(self.e_set) % 1000):
                    print(len(self.e_set))
#                 print("{}: {} ;; {}".format(len(self.e_set), self.e, sorted(self.e_set)[0:10]))
#                 print("{}: {}".format(len(self.e_set), self.e))
            op, a, b, c = prog[self.reg[self.ip]]
            VM.__dict__[op](self.reg, a, b, c)
        return self.reg

    def addr(R, a, b, c): R[c] = R[a] + R[b]
    def addi(R, a, b, c): R[c] = R[a] + b

    def mulr(R, a, b, c): R[c] = R[a] * R[b]
    def muli(R, a, b, c): R[c] = R[a] * b

    def banr(R, a, b, c): R[c] = R[a] & R[b]
    def bani(R, a, b, c): R[c] = R[a] & b

    def borr(R, a, b, c): R[c] = R[a] | R[b]
    def bori(R, a, b, c): R[c] = R[a] | b

    def setr(R, a, b, c): R[c] = R[a]
    def seti(R, a, b, c): R[c] = a

    def gtir(R, a, b, c): R[c] = 1 if a > R[b] else 0
    def gtri(R, a, b, c): R[c] = 1 if R[a] > b else 0
    def gtrr(R, a, b, c): R[c] = 1 if R[a] > R[b] else 0

    def eqir(R, a, b, c): R[c] = 1 if a == R[b] else 0
    def eqri(R, a, b, c): R[c] = 1 if R[a] == b else 0
    def eqrr(R, a, b, c): R[c] = 1 if R[a] == R[b] else 0


def MAIN(argv):
    with open(argv.fname, 'r') as fh:
        prog = []
        for line in fh.readlines():
            if line.startswith("#ip "):
                vm = VM(int(line[4]))
            else:
                l = line.split()
                prog.append([ l[0], int(l[1]), int(l[2]), int(l[3]) ])

    vm.part = 1
    vm.reg = [0, 0, 0, 0, 0, 0]
    vm.reg[vm.ip] -= 1
    vm.run(prog)

    vm.part = 2
    vm.reg = [0, 0, 0, 0, 0, 0]
    vm.reg[vm.ip] -= 1
    vm.run(prog)

def getopts():
    parser = argparse.ArgumentParser(description="""Advent of code day 21""")
    parser.add_argument('fname', type=str, nargs='?', default="21.in", help='File name')
    return parser.parse_args()

if __name__ == '__main__':
    MAIN(getopts())


"""
## 0:a  1:b  2:c  3:d  4:e  5:f
###ip 1  IPointer := b

 0: e = 123        # seti 123 0 4
 1: e &= 456       # bani 4 456 4
 2: e = (e == 72)  # eqri 4 72 4        -> e = 1
 3: b += e         # addr 4 1 1         -> goto 5 for first pass
 4:                # seti 0 0 1
 5: e = 0          # seti 0 1 4
 6: d = e | 65536  # bori 4 65536 3     -> d = 65536
 7: e = 3730679    # seti 3730679 4 4
 8: f = d & 255    # bani 3 255 5       -> f = 0
 9: e += f         # addr 4 5 4
10: e &= 16777215  # bani 4 16777215 4  -> e = 3730679
11: e *= 65899     # muli 4 65899 4     -> e = 245848015421
12: e &= 16777215  # bani 4 16777215 4  -> e = 11469373
13: f = (256 > d)  # gtir 256 3 5       -> f = 0
14: b += f         # addr 5 1 1         -> goto 16 when d is small
15: goto 17        # addi 1 1 1
16:                # seti 27 1 1
17: e = 0          # seti 0 0 5
18: c = e + 1      # addi 5 1 2
19: c *= 256       # muli 2 256 2
20: c = (c > d)    # gtrr 2 3 2
21: goto 23 if c   # addr 2 1 1
22: goto 24        # addi 1 1 1
23: goto 26        # seti 25 1 1
24: f += 1         # addi 5 1 5
25: goto 18        # seti 17 1 1
26: d = f          # setr 5 2 3
27: goto 8         # seti 7 6 1
28: f = (e == a)   # eqrr 4 0 5         -> e == a
29: b += f         # addr 5 1 1         END if f == 1
30: goto 6         # seti 5 1 1

[16128384, 7594979, 4358858, 12563078, 7495422, 9196910, 5403419, 13960098, 6732493, 3347203, 4139290, 4931961, 6641314, 16711160, 2466535, 3069059, 8608359, 6188101, 12920629, 10827466, 93840, 8598446, 13573403, 12634448, 14034673, 7412363, 16425003, 12857743, 13289266, 10378739, 11213192, 5135031, 11467897, 9691537, 2365474, 16765162, 15277016, 12685827, 16206907, 2952287, 1063773, 9624314, 3826462, 4934403, 9954202, 254507, 8095129, 9559606, 14662560, 11076941, 5069388, 10806002, 15052756, 9154047, 5384928, 16369856, 5691376, 4549281, 12200633, 10800019, 11513448, 7367600, 480435, 4396223, 12128119, 10072532, 15681453, 1511520, 6226786, 12123835, 9355927, 1370113, 13732311, 7716646, 5077589, 13695229, 14131631, 16358408, 12059772, 6939008, 10959633, 12076808, 12501583, 15152313, 4269361, 6096096, 15953784, 14280133, 13059876, 5566269, 1940250, 5916581, 5987308, 9743717, 7319328, 11148369, 13307149, 16288650, 14137433, 12572357, 325999, 3165466, 10325923, 5555428, 57388, 13523364, 16471319, 1715936, 2196540, 10179000, 6827023, 13110689, 12970160, 13967396, 8034536, 1707918, 6987071, 824240, 6501327, 5199470, 15474154, 13441783, 6559139, 2828626, 4675397, 16043008, 892648, 12289002, 11266503, 182644, 12981555, 7163896, 12646947, 5501379, 5697832, 6918291, 11188401, 4150505, 8510889, 2530176, 5512933, 15988873, 12975177, 12628275, 585778, 7584382, 12527210, 13158590, 1891130, 16154693, 4076849, 14364058, 11948817, 565008, 7707375, 15078083, 12674013, 7498482, 7479862, 2068794, 8894881, 10837862, 11783621, 6344682, 7485717, 15165734, 3092949, 8925490, 13264887, 5956722, 14492376, 10327054, 12097074, 3391236, 6674873, 16264728, 3448366, 6006868, 11185602, 4839545, 13430507, 787187, 5198527, 1427785, 470216, 15252134, 16267956, 4915566, 3092689, 10272045, 15184864, 2625437, 12687862, 8159763, 8422767, 13353242, 1680853, 5459412, 4707367, 14438043, 9800723, 574129, 821869, 8745365, 11027620, 1893896, 4953602, 14406522, 2919591, 7311157, 1038336, 4618610, 8381225, 13008768, 5551497, 10380756, 13926723, 15355662, 13519087, 1028895, 10797762, 16517412, 3838721, 4118604, 15214118, 11042368, 2585478, 11590639, 16455888, 2408646, 14598014, 6540587, 2348172, 10684494, 13907528, 12177530, 8541254, 11400508, 8473573, 1618290, 9583207, 7220181, 12090268, 7253983, 4881982, 12531094, 4640729, 357044, 9846762, 2555287, 7664940, 16463693, 13653684, 12784882, 3254656, 3035953, 1796248, 11807438, 316896, 16067513, 12001418, 4994928, 13336403, 8257694, 7653220, 3861559, 6177823, 4982267, 4102210, 11984040, 8390918, 2888051, 11108214, 389057, 5162102, 14953472, 16503960, 11964026, 13606334, 14315177, 14150887, 5413475, 1795369, 1088166, 2011468, 14651031, 8702941, 16199942, 6497709, 14282058, 3244299, 3486810, 12609022, 12769047, 9650538, 6607837, 9902446, 12312045, 11236298, 8396071, 11316890, 6385936, 16620153, 3229017, 1028680, 9701716, 12275481, 13859952, 9107762, 9341781, 7046364, 15691398, 4319722, 4346495, 13804421, 14251568, 4840606, 14733774, 1759987, 10465969, 2306959, 14149358, 6590546, 6996466, 13829053, 15201464, 4084638, 4017823, 531071, 5748943, 8171399, 11326864, 1654785, 1295899, 10324701, 3580437, 4469235, 3154462, 6851548, 13991615, 12386071, 5088720, 7293425, 9496158, 6438496, 8121444, 7952758, 12928059, 3846065, 3579288, 8970959, 2058439, 10265527, 9843156, 15460439, 4898091, 9144052, 3426592]


"""
