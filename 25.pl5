#!/usr/bin/perl -w
use strict; use warnings; use 5.014;
use Method::Signatures::Simple;

our @LINES;
our @SUBS;
our $lineno = 0;
our $steps = 0;
our $start = time;
our $transmission = 0;
use vars qw/ $a $b $c $d /;
$a //= 0; $b //= 0; $c //= 0; $d //= 0;

sub init {
    $a = shift;
    $b = 0;
    $c = 0;
    $d = 0;
    $lineno = 0;
    $steps = 0;
    $start = time;
    $transmission = 0;
}

sub transmit {
#     say "TEST $_[0] = $transmission";
    die "Bad signal" unless $_[0] == ($transmission++ % 2);
    say $transmission if 0 == $transmission % 1000;
}

sub MAIN {
    my $file = shift // "25.in";
    my @lines = cat($file);
    my $i = 1;
    while ($i) {
        say "Test \$a == $i";
        init($i++);
        eval { run(@lines) };
    }
}


sub commify {
    local $_ = reverse( (@_ > 1) ? sprintf(@_) : pop );
    /\./g; /(?=\d)/g;# sets pos()
    s/\G(\d{3})(?=\d)/$1,/g;
    return scalar reverse $_;
}

sub cat {
    my $f = shift;
    open my $F, "<", $f or die "Can't open $f for reading: $!";
    chomp(my @lines = <$F>);
    return @lines;
    local $/ = undef;
    return scalar <$F>;
}

sub run {
    my $line = 0;
    compile_line(++$line, $_) for @_;
    $start = time;
    $lineno = 1;
    while ($SUBS[$lineno]) {
#         say commify($steps) if 0 == $steps % 1_000_000;
        $SUBS[$lineno]->();
    }
    say "[$a $b $c $d]";
    my $t = time;
#     printf "%s steps in %d seconds (%s ips)\n", commify($steps), $t - $start, commify(int($steps / ($t - $start)));
}

sub toggle {
    my $line = shift;
    local $_ = $LINES[$line];
    return unless $_;
    if    (s/inc/dec/)     { compile_line($line, $_, 1); }
    elsif (s/dec|tgl/inc/) { compile_line($line, $_, 1); }
    elsif (s/jnz/cpy/)     { compile_line($line, $_, 1); }
    elsif (s/cpy/jnz/)     { compile_line($line, $_, 1); }
    else                   { die "Not implemented" }
}

sub compile_line {
    state $cache = {};
    my ($line, $cmd, $else) = @_;
    $LINES[$line] = $cmd;

    unless ($$cache{$cmd}) {
        my $code;
        for ($cmd) {
            if    (/cpy (-?\d+) ([a-z])/)  { $code = sprintf('$%s = %d',  $2, $1) }
            elsif (/cpy ([a-z]) ([a-z])/)  { $code = sprintf('$%s = $%s', $2, $1) }

            elsif (/jnz ([a-z]) (-?\d+)/)  { $code = sprintf('return $lineno +=  %d if $%s != 0', $2, $1) }
            elsif (/jnz ([a-z]) ([a-z])/)  { $code = sprintf('return $lineno += $%s if $%s != 0', $2, $1) }
            elsif (/jnz (-?\d+) (-?\d+)/)  { $code = sprintf('return $lineno +=  %d if  %d != 0', $2, $1) }
            elsif (/jnz (-?\d+) ([a-z])/)  { $code = sprintf('return $lineno += $%s if  %d != 0', $2, $1) }

            elsif (/dec ([a-z])/)          { $code = sprintf('$%s--', $1) }
            elsif (/inc ([a-z])/)          { $code = sprintf('$%s++', $1) }

            elsif (/out (-?\d+)/)          { $code = sprintf('transmit(%d)',  $1) }
            elsif (/out ([a-z])/)          { $code = sprintf('transmit($%s)', $1) }

            elsif (/tgl ([a-z])/)          { $code = sprintf('toggle(%d + $%s)', $line, $1) }
            else {
                if ($else) {
                    $code = $else;
                } else {
                    die "Not implemented";
                }
            }
        }
        $$cache{$cmd} = eval sprintf 'sub { $steps++; %s; $lineno++; }', $code;
    }

    $SUBS[$line] = $$cache{$cmd};
}

MAIN(@ARGV);
